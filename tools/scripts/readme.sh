#!/bin/bash
# readme.sh - 生成yamjson使用说明文档

# 导入公共函数和变量
source "$(dirname "$0")/common.sh"

# 函数: 生成README文件
generate_readme() {
    local readme="$DIST_DIR/README.md"

    log_info "生成使用说明文件..."

    echo "# YamJSON 库" > "$readme"
    echo "" >> "$readme"
    echo "YAML 与 JSON 相互转换的 C++ 库" >> "$readme"
    echo "" >> "$readme"
    echo "## 可用版本" >> "$readme"
    echo "" >> "$readme"

    if [ -f "$DIST_DIR/include/$SINGLE_HEADER" ]; then
        echo "### 单头文件版本" >> "$readme"
        echo "" >> "$readme"
        echo "文件: \`include/yamjson.hpp\`" >> "$readme"
        echo "" >> "$readme"
        echo "使用方法:" >> "$readme"
        echo '```cpp' >> "$readme"
        echo "// 在所有需要使用 yamjson 的文件中:" >> "$readme"
        echo "#include \"yamjson.hpp\"" >> "$readme"
        echo "" >> "$readme"
        echo "// 在且仅在一个源文件中添加以下代码:" >> "$readme"
        echo "#define YAMJSON_IMPLEMENTATION" >> "$readme"
        echo "#include \"yamjson.hpp\"" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "**特点:**" >> "$readme"
        echo "- 完全独立，单个文件包含所有功能" >> "$readme"
        echo "- 无需额外依赖，已内联包含 YAML-CPP 和 JSON 库" >> "$readme"
        echo "- 采用 stb 风格设计，一次定义多处包含" >> "$readme"
        echo "- 适用于快速集成和简单项目" >> "$readme"
        echo "" >> "$readme"
    fi

    if [ -f "$DIST_DIR/lib/libyamjson.a" ]; then
        echo "### 静态库版本" >> "$readme"
        echo "" >> "$readme"
        echo "文件:" >> "$readme"
        echo "- \`include/yamjson_lib.h\` - 合并头文件（推荐使用）" >> "$readme"
        echo "- \`include/yamjson_original.h\` - 原始头文件（作为备份）" >> "$readme"
        echo "- \`lib/libyaml.a\` - YAML-CPP 静态库" >> "$readme"
        echo "- \`lib/libyamjson.a\` - YamJSON 静态库" >> "$readme"
        echo "" >> "$readme"
        echo "使用方法:" >> "$readme"
        echo '```cpp' >> "$readme"
        echo "// 使用合并头文件（推荐）:" >> "$readme"
        echo "#include \"yamjson_lib.h\"" >> "$readme"
        echo "" >> "$readme"
        echo "// 或者使用原始头文件（不推荐）:" >> "$readme"
        echo "// #include \"yamjson_original.h\"" >> "$readme"
        echo "// #include \"json.hpp\"" >> "$readme"
        echo "// #include \"yaml.hpp\"" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "编译命令:" >> "$readme"
        echo '```bash' >> "$readme"
        echo "g++ your_file.cpp -o your_program -I./include -L./lib -lyamjson -lyaml" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "**特点:**" >> "$readme"
        echo "- 库与代码分离，便于升级" >> "$readme"
        echo "- 二进制体积较小" >> "$readme"
        echo "- 使用合并头文件简化包含过程" >> "$readme"
        echo "- 适用于大型项目" >> "$readme"
        echo "" >> "$readme"
    fi

    if [ -f "$DIST_DIR/lib/libyamjson-debug.a" ]; then
        echo "### 静态库调试版本" >> "$readme"
        echo "" >> "$readme"
        echo "文件:" >> "$readme"
        echo "- \`include/yamjson_lib.h\` - 合并头文件（推荐使用）" >> "$readme"
        echo "- \`include/yamjson_original.h\` - 原始头文件（作为备份）" >> "$readme"
        echo "- \`lib/libyaml-debug.a\` - YAML-CPP 调试版静态库" >> "$readme"
        echo "- \`lib/libyamjson-debug.a\` - YamJSON 调试版静态库" >> "$readme"
        echo "" >> "$readme"
        echo "使用方法:" >> "$readme"
        echo '```cpp' >> "$readme"
        echo "// 使用合并头文件（推荐）:" >> "$readme"
        echo "#include \"yamjson_lib.h\"" >> "$readme"
        echo "" >> "$readme"
        echo "// 或者使用原始头文件（不推荐）:" >> "$readme"
        echo "// #include \"yamjson_original.h\"" >> "$readme"
        echo "// #include \"json.hpp\"" >> "$readme"
        echo "// #include \"yaml.hpp\"" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "编译命令:" >> "$readme"
        echo '```bash' >> "$readme"
        echo "g++ -g your_file.cpp -o your_program -I./include -L./lib -lyamjson-debug -lyaml-debug" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "**特点:**" >> "$readme"
        echo "- 包含调试符号，便于调试" >> "$readme"
        echo "- 更详细的错误信息" >> "$readme"
        echo "- 使用合并头文件简化包含过程" >> "$readme"
        echo "- 适用于开发和测试阶段" >> "$readme"
        echo "" >> "$readme"
    fi

    if [ -f "$DIST_DIR/lib/libyamjson.so" ]; then
        echo "### 动态库版本" >> "$readme"
        echo "" >> "$readme"
        echo "文件:" >> "$readme"
        echo "- \`include/yamjson_lib.h\` - 合并头文件（推荐使用）" >> "$readme"
        echo "- \`include/yamjson_original.h\` - 原始头文件（作为备份）" >> "$readme"
        echo "- \`lib/libyaml.so\` - YAML-CPP 动态库" >> "$readme"
        echo "- \`lib/libyamjson.so\` - YamJSON 动态库" >> "$readme"
        echo "" >> "$readme"
        echo "使用方法:" >> "$readme"
        echo '```cpp' >> "$readme"
        echo "// 使用合并头文件（推荐）:" >> "$readme"
        echo "#include \"yamjson_lib.h\"" >> "$readme"
        echo "" >> "$readme"
        echo "// 或者使用原始头文件（不推荐）:" >> "$readme"
        echo "// #include \"yamjson_original.h\"" >> "$readme"
        echo "// #include \"json.hpp\"" >> "$readme"
        echo "// #include \"yaml.hpp\"" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "编译命令:" >> "$readme"
        echo '```bash' >> "$readme"
        echo "g++ your_file.cpp -o your_program -I./include -L./lib -lyamjson -lyaml" >> "$readme"
        echo "LD_LIBRARY_PATH=./lib ./your_program  # 设置运行时库路径" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "**特点:**" >> "$readme"
        echo "- 运行时动态加载" >> "$readme"
        echo "- 可以独立升级库而不重新编译程序" >> "$readme"
        echo "- 多个程序共享内存中的一份库" >> "$readme"
        echo "- 使用合并头文件简化包含过程" >> "$readme"
        echo "" >> "$readme"
    fi

    if [ -f "$DIST_DIR/lib/libyamjson-debug.so" ]; then
        echo "### 动态库调试版本" >> "$readme"
        echo "" >> "$readme"
        echo "文件:" >> "$readme"
        echo "- \`include/yamjson_lib.h\` - 合并头文件（推荐使用）" >> "$readme"
        echo "- \`include/yamjson_original.h\` - 原始头文件（作为备份）" >> "$readme"
        echo "- \`lib/libyaml-debug.so\` - YAML-CPP 调试版动态库" >> "$readme"
        echo "- \`lib/libyamjson-debug.so\` - YamJSON 调试版动态库" >> "$readme"
        echo "" >> "$readme"
        echo "使用方法:" >> "$readme"
        echo '```cpp' >> "$readme"
        echo "// 使用合并头文件（推荐）:" >> "$readme"
        echo "#include \"yamjson_lib.h\"" >> "$readme"
        echo "" >> "$readme"
        echo "// 或者使用原始头文件（不推荐）:" >> "$readme"
        echo "// #include \"yamjson_original.h\"" >> "$readme"
        echo "// #include \"json.hpp\"" >> "$readme"
        echo "// #include \"yaml.hpp\"" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "编译命令:" >> "$readme"
        echo '```bash' >> "$readme"
        echo "g++ -g your_file.cpp -o your_program -I./include -L./lib -lyamjson-debug -lyaml-debug" >> "$readme"
        echo "LD_LIBRARY_PATH=./lib ./your_program  # 设置运行时库路径" >> "$readme"
        echo '```' >> "$readme"
        echo "" >> "$readme"
        echo "**特点:**" >> "$readme"
        echo "- 动态库的调试版本" >> "$readme"
        echo "- 包含详细的调试信息" >> "$readme"
        echo "- 使用合并头文件简化包含过程" >> "$readme"
        echo "- 适用于复杂项目的调试" >> "$readme"
        echo "" >> "$readme"
    fi

    echo "## 测试脚本" >> "$readme"
    echo "" >> "$readme"
    echo "使用提供的测试脚本验证库是否正常工作:" >> "$readme"
    echo "" >> "$readme"
    echo '```bash' >> "$readme"
    echo "./test_yamjson.sh" >> "$readme"
    echo '```' >> "$readme"
    echo "" >> "$readme"

    echo "## 多文件项目中使用单头文件版本" >> "$readme"
    echo "" >> "$readme"
    echo "在多文件项目中使用单头文件版本时，只需要在一个源文件中定义实现:" >> "$readme"
    echo "" >> "$readme"
    echo "**在 main.cpp 中:**" >> "$readme"
    echo '```cpp' >> "$readme"
    echo "#define YAMJSON_IMPLEMENTATION  // 只在一个源文件中定义" >> "$readme"
    echo "#include \"yamjson.hpp\"" >> "$readme"
    echo "" >> "$readme"
    echo "int main() {" >> "$readme"
    echo "    // 使用 yamjson" >> "$readme"
    echo "    yamjson::YamJSON y;" >> "$readme"
    echo "    y.loadYaml(\"key: value\");" >> "$readme"
    echo "    std::cout << y.toJSON() << std::endl;" >> "$readme"
    echo "    return 0;" >> "$readme"
    echo "}" >> "$readme"
    echo '```' >> "$readme"
    echo "" >> "$readme"
    echo "**在其他文件中 (example.cpp):**" >> "$readme"
    echo '```cpp' >> "$readme"
    echo "#include \"yamjson.hpp\"  // 不定义 YAMJSON_IMPLEMENTATION" >> "$readme"
    echo "" >> "$readme"
    echo "void process() {" >> "$readme"
    echo "    yamjson::YamJSON y;" >> "$readme"
    echo "    // 使用 yamjson" >> "$readme"
    echo "}" >> "$readme"
    echo '```' >> "$readme"
    echo "" >> "$readme"
    echo "**编译命令:**" >> "$readme"
    echo '```bash' >> "$readme"
    echo "g++ -std=c++11 main.cpp example.cpp -o program -I./include" >> "$readme"
    echo '```' >> "$readme"

    log_success "使用说明文件已生成：$readme"
}

# 如果直接运行此脚本，则执行生成
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    generate_readme
    exit $?
fi